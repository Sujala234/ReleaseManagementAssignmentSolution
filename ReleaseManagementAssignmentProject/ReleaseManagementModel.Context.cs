//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReleaseManagementAssignmentProject
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ReleaseManagementEntities : DbContext
    {
        public ReleaseManagementEntities()
            : base("name=ReleaseManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Developer> Developers { get; set; }
        public virtual DbSet<DevModule> DevModules { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<Manager> Managers { get; set; }
        public virtual DbSet<project> projects { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamLead> TeamLeads { get; set; }
        public virtual DbSet<Tester> Testers { get; set; }
    
        public virtual ObjectResult<Proc_CheckLogin_Result> Proc_CheckLogin(string un, string pass)
        {
            var unParameter = un != null ?
                new ObjectParameter("un", un) :
                new ObjectParameter("un", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_CheckLogin_Result>("Proc_CheckLogin", unParameter, passParameter);
        }
    
        public virtual int InsertProjectProd(Nullable<int> pid, string pname, string pdesc, string preq, Nullable<int> pstatus)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var pnameParameter = pname != null ?
                new ObjectParameter("pname", pname) :
                new ObjectParameter("pname", typeof(string));
    
            var pdescParameter = pdesc != null ?
                new ObjectParameter("pdesc", pdesc) :
                new ObjectParameter("pdesc", typeof(string));
    
            var preqParameter = preq != null ?
                new ObjectParameter("preq", preq) :
                new ObjectParameter("preq", typeof(string));
    
            var pstatusParameter = pstatus.HasValue ?
                new ObjectParameter("pstatus", pstatus) :
                new ObjectParameter("pstatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProjectProd", pidParameter, pnameParameter, pdescParameter, preqParameter, pstatusParameter);
        }
    
        public virtual int assignProjectToTL(Nullable<int> teamid, string teamname, Nullable<int> pid, Nullable<int> teamleadid)
        {
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var teamnameParameter = teamname != null ?
                new ObjectParameter("teamname", teamname) :
                new ObjectParameter("teamname", typeof(string));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var teamleadidParameter = teamleadid.HasValue ?
                new ObjectParameter("teamleadid", teamleadid) :
                new ObjectParameter("teamleadid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("assignProjectToTL", teamidParameter, teamnameParameter, pidParameter, teamleadidParameter);
        }
    
        public virtual int addDeveloper(Nullable<int> devid, string devname, string githublink, Nullable<int> teamid)
        {
            var devidParameter = devid.HasValue ?
                new ObjectParameter("devid", devid) :
                new ObjectParameter("devid", typeof(int));
    
            var devnameParameter = devname != null ?
                new ObjectParameter("devname", devname) :
                new ObjectParameter("devname", typeof(string));
    
            var githublinkParameter = githublink != null ?
                new ObjectParameter("githublink", githublink) :
                new ObjectParameter("githublink", typeof(string));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addDeveloper", devidParameter, devnameParameter, githublinkParameter, teamidParameter);
        }
    
        public virtual int addTester(Nullable<int> tid, string tname, Nullable<int> tstaus, Nullable<int> teamid)
        {
            var tidParameter = tid.HasValue ?
                new ObjectParameter("tid", tid) :
                new ObjectParameter("tid", typeof(int));
    
            var tnameParameter = tname != null ?
                new ObjectParameter("tname", tname) :
                new ObjectParameter("tname", typeof(string));
    
            var tstausParameter = tstaus.HasValue ?
                new ObjectParameter("tstaus", tstaus) :
                new ObjectParameter("tstaus", typeof(int));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addTester", tidParameter, tnameParameter, tstausParameter, teamidParameter);
        }
    
        public virtual int I_Developer_I(Nullable<int> dEVID, string dName, string githublink, Nullable<int> tid)
        {
            var dEVIDParameter = dEVID.HasValue ?
                new ObjectParameter("DEVID", dEVID) :
                new ObjectParameter("DEVID", typeof(int));
    
            var dNameParameter = dName != null ?
                new ObjectParameter("DName", dName) :
                new ObjectParameter("DName", typeof(string));
    
            var githublinkParameter = githublink != null ?
                new ObjectParameter("Githublink", githublink) :
                new ObjectParameter("Githublink", typeof(string));
    
            var tidParameter = tid.HasValue ?
                new ObjectParameter("Tid", tid) :
                new ObjectParameter("Tid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("I_Developer_I", dEVIDParameter, dNameParameter, githublinkParameter, tidParameter);
        }
    
        public virtual int I_Developer_p(Nullable<int> dEVID, string dName, string githublink, Nullable<int> tid)
        {
            var dEVIDParameter = dEVID.HasValue ?
                new ObjectParameter("DEVID", dEVID) :
                new ObjectParameter("DEVID", typeof(int));
    
            var dNameParameter = dName != null ?
                new ObjectParameter("DName", dName) :
                new ObjectParameter("DName", typeof(string));
    
            var githublinkParameter = githublink != null ?
                new ObjectParameter("Githublink", githublink) :
                new ObjectParameter("Githublink", typeof(string));
    
            var tidParameter = tid.HasValue ?
                new ObjectParameter("Tid", tid) :
                new ObjectParameter("Tid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("I_Developer_p", dEVIDParameter, dNameParameter, githublinkParameter, tidParameter);
        }
    
        public virtual int I_Manager_p(Nullable<int> mid, string mname, Nullable<int> pid)
        {
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var mnameParameter = mname != null ?
                new ObjectParameter("mname", mname) :
                new ObjectParameter("mname", typeof(string));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("I_Manager_p", midParameter, mnameParameter, pidParameter);
        }
    
        public virtual int I_Team(Nullable<int> tid, string tName, Nullable<int> pid)
        {
            var tidParameter = tid.HasValue ?
                new ObjectParameter("Tid", tid) :
                new ObjectParameter("Tid", typeof(int));
    
            var tNameParameter = tName != null ?
                new ObjectParameter("TName", tName) :
                new ObjectParameter("TName", typeof(string));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("I_Team", tidParameter, tNameParameter, pidParameter);
        }
    
        public virtual int I_Team_I(Nullable<int> tid, string tName, Nullable<int> pid)
        {
            var tidParameter = tid.HasValue ?
                new ObjectParameter("Tid", tid) :
                new ObjectParameter("Tid", typeof(int));
    
            var tNameParameter = tName != null ?
                new ObjectParameter("TName", tName) :
                new ObjectParameter("TName", typeof(string));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("I_Team_I", tidParameter, tNameParameter, pidParameter);
        }
    
        public virtual int I_TeamLead(Nullable<int> teamleadId, Nullable<int> teamId, Nullable<int> managerId)
        {
            var teamleadIdParameter = teamleadId.HasValue ?
                new ObjectParameter("teamleadId", teamleadId) :
                new ObjectParameter("teamleadId", typeof(int));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("teamId", teamId) :
                new ObjectParameter("teamId", typeof(int));
    
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("managerId", managerId) :
                new ObjectParameter("managerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("I_TeamLead", teamleadIdParameter, teamIdParameter, managerIdParameter);
        }
    
        public virtual int InsertLoginUser(string uname, string upwd, string role)
        {
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var upwdParameter = upwd != null ?
                new ObjectParameter("upwd", upwd) :
                new ObjectParameter("upwd", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLoginUser", unameParameter, upwdParameter, roleParameter);
        }
    
        public virtual ObjectResult<S_TeamLead_Result> S_TeamLead(Nullable<int> mid)
        {
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<S_TeamLead_Result>("S_TeamLead", midParameter);
        }
    }
}
